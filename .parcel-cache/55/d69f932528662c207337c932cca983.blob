var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
var _parentElement = new WeakMap();
var _query = new WeakMap();
class SearchView {
  constructor() {
    _parentElement.set(this, {
      writable: true,
      value: document.querySelector('.search')
    });
    _query.set(this, {
      writable: true,
      value: ''
    });
  }
  getQuery(event) {
    event.preventDefault();
    _classPrivateFieldSet(this, _query, document.querySelector('.search__field').value);
    console.log(query);
  }
}
exports.default = new SearchView();
